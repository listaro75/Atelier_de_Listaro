#!/bin/bash
# Script de r√©cup√©ration r√©seau pour Raspberry Pi
# Atelier de Listaro - Diagnostic et r√©paration

echo "üö® Script de r√©cup√©ration r√©seau - Atelier de Listaro"
echo "===================================================="

# Fonction de log
log_action() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a /var/log/network_recovery.log
}

log_action "üîç D√©but du diagnostic r√©seau"

# V√©rifier si on est root
if [ "$EUID" -ne 0 ]; then
    echo "‚ùå Ce script doit √™tre ex√©cut√© en tant que root (sudo)"
    exit 1
fi

echo "üìä √âTAT ACTUEL DU SYST√àME"
echo "========================="

# IP locale
echo "üîç Adresses IP locales :"
ip addr show | grep "inet " | grep -v "127.0.0.1"

# IP publique
echo ""
echo "üåê IP publique actuelle :"
PUBLIC_IP=$(curl -s --connect-timeout 10 ifconfig.me 2>/dev/null || echo "Non accessible")
echo "IP publique : $PUBLIC_IP"
log_action "IP publique d√©tect√©e : $PUBLIC_IP"

# √âtat des services r√©seau
echo ""
echo "‚öôÔ∏è √âTAT DES SERVICES"
echo "==================="

services=("networking" "apache2" "ssh" "postfix")
for service in "${services[@]}"; do
    status=$(systemctl is-active $service 2>/dev/null)
    if [ "$status" = "active" ]; then
        echo "‚úÖ $service : Actif"
    else
        echo "‚ùå $service : $status"
        log_action "Service $service non actif : $status"
    fi
done

# Test des ports
echo ""
echo "üîå PORTS R√âSEAU"
echo "==============="
netstat -tlnp 2>/dev/null | grep -E ":80|:443|:22" | head -10

# Diagnostic r√©seau avanc√©
echo ""
echo "üåê DIAGNOSTIC R√âSEAU AVANC√â"
echo "==========================="

# Test de connectivit√© internet
echo "üß™ Test de connectivit√© internet :"
if ping -c 3 8.8.8.8 >/dev/null 2>&1; then
    echo "‚úÖ Internet accessible"
else
    echo "‚ùå Pas d'acc√®s internet"
    log_action "ALERTE : Pas d'acc√®s internet"
fi

# Test DNS
echo ""
echo "üß™ Test de r√©solution DNS :"
if nslookup google.com >/dev/null 2>&1; then
    echo "‚úÖ DNS fonctionnel"
else
    echo "‚ùå Probl√®me DNS"
    log_action "ALERTE : Probl√®me DNS"
fi

# R√âPARATIONS AUTOMATIQUES
echo ""
echo "üõ†Ô∏è R√âPARATIONS AUTOMATIQUES"
echo "==========================="

# Red√©marrer les services r√©seau si n√©cessaire
if ! systemctl is-active --quiet networking; then
    echo "üîÑ Red√©marrage du service networking..."
    systemctl restart networking
    sleep 5
    log_action "Service networking red√©marr√©"
fi

# Red√©marrer Apache si n√©cessaire
if ! systemctl is-active --quiet apache2; then
    echo "üîÑ Red√©marrage d'Apache..."
    systemctl restart apache2
    sleep 3
    log_action "Apache red√©marr√©"
fi

# Configuration du firewall
echo ""
echo "üî• CONFIGURATION FIREWALL"
echo "========================="

# V√©rifier si ufw est actif
if systemctl is-active --quiet ufw; then
    echo "üîç UFW actif - V√©rification des r√®gles..."
    ufw status numbered
    
    # S'assurer que les ports essentiels sont ouverts
    ufw allow 22/tcp comment 'SSH'
    ufw allow 80/tcp comment 'HTTP'
    ufw allow 443/tcp comment 'HTTPS'
    
    echo "‚úÖ R√®gles firewall mises √† jour"
    log_action "R√®gles firewall v√©rifi√©es"
else
    echo "‚ÑπÔ∏è UFW non actif"
fi

# TESTS DE CONNECTIVIT√â
echo ""
echo "üß™ TESTS DE CONNECTIVIT√â POST-R√âPARATION"
echo "========================================"

# Re-test de l'IP publique
echo "üåê Nouvelle IP publique :"
NEW_PUBLIC_IP=$(curl -s --connect-timeout 10 ifconfig.me 2>/dev/null || echo "Toujours non accessible")
echo "IP publique : $NEW_PUBLIC_IP"

if [ "$NEW_PUBLIC_IP" != "Non accessible" ] && [ "$NEW_PUBLIC_IP" != "Toujours non accessible" ]; then
    echo "‚úÖ Connexion internet r√©tablie"
    log_action "Connexion r√©tablie - Nouvelle IP : $NEW_PUBLIC_IP"
    
    # Test du serveur web
    echo ""
    echo "üåê Test du serveur web local :"
    if curl -s --connect-timeout 5 http://localhost >/dev/null; then
        echo "‚úÖ Serveur web local accessible"
    else
        echo "‚ùå Serveur web local non accessible"
    fi
    
else
    echo "‚ùå Connexion internet toujours probl√©matique"
    log_action "√âCHEC : Connexion non r√©tablie"
fi

# INFORMATIONS DE R√âCUP√âRATION
echo ""
echo "üìã INFORMATIONS DE R√âCUP√âRATION"
echo "==============================="

echo "üè† Acc√®s local possible via :"
ip addr show | grep "inet " | grep -v "127.0.0.1" | while read line; do
    ip=$(echo $line | awk '{print $2}' | cut -d'/' -f1)
    echo "   ‚Ä¢ http://$ip"
done

echo ""
echo "üîó URLs de test :"
echo "   ‚Ä¢ http://mail.local (si mDNS fonctionne)"
echo "   ‚Ä¢ http://192.168.1.100 (IP courante possible)"
echo "   ‚Ä¢ http://192.168.0.100 (r√©seau alternatif)"

# RECOMMANDATIONS
echo ""
echo "üí° RECOMMANDATIONS"
echo "=================="
echo ""
echo "Si le probl√®me persiste :"
echo "1. üîå V√©rifiez les connexions physiques (c√¢bles, alimentation)"
echo "2. üì∂ Red√©marrez votre box internet"
echo "3. üîÑ Red√©marrez le Raspberry Pi : sudo reboot"
echo "4. üìû Contactez votre FAI si l'IP a chang√©"
echo "5. üåê Configurez un service DynDNS pour √©viter ce probl√®me"
echo ""

# CONFIGURATION DYNDNS
echo "üåê CONFIGURATION DYNDNS RECOMMAND√âE"
echo "==================================="
echo ""
echo "Pour √©viter ce probl√®me √† l'avenir, installez un client DynDNS :"
echo ""
echo "# Installation DuckDNS (gratuit)"
echo "mkdir -p /opt/duckdns"
echo "cd /opt/duckdns"
echo "curl -s 'https://www.duckdns.org/update?domains=VOTRE-DOMAINE&token=VOTRE-TOKEN&ip=' > /dev/null"
echo ""
echo "# Automatisation (crontab)"
echo "echo '*/5 * * * * /opt/duckdns/duck.sh >/dev/null 2>&1' | crontab -"
echo ""

# SAUVEGARDE D'URGENCE
echo "üíæ SAUVEGARDE D'URGENCE"
echo "======================"
echo ""
echo "Sauvegardez vos donn√©es importantes :"
echo "‚Ä¢ Base de donn√©es : mysqldump -u root -p atelier_de_listaro > backup.sql"
echo "‚Ä¢ Site web : tar -czf site_backup.tar.gz /var/www/html/"
echo "‚Ä¢ Configuration : cp -r /etc/apache2/sites-available/ ~/apache_backup/"
echo ""

log_action "Script de r√©cup√©ration termin√©"

echo "‚úÖ DIAGNOSTIC TERMIN√â"
echo "===================="
echo "Consultez le log complet : /var/log/network_recovery.log"
echo ""

# Proposer un red√©marrage si n√©cessaire
read -p "Voulez-vous red√©marrer le syst√®me maintenant ? (y/N) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    log_action "Red√©marrage syst√®me demand√© par l'utilisateur"
    echo "üîÑ Red√©marrage en cours..."
    sleep 3
    reboot
fi
